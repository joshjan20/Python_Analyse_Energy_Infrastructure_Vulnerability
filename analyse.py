# Import required libraries
import geopandas as gpd
import xarray as xr
import pandas as pd
import numpy as np
import folium
from dask.diagnostics import ProgressBar

# Load geospatial data of power infrastructure
power_gdf = gpd.read_file("power_infrastructure.shp")

# Load climate data (NetCDF format)
climate_ds = xr.open_dataset("temperature_data.nc")

# Set parameters
temperature_threshold = 35  # degrees Celsius, example threshold for extreme heat
projection_year_start = '2050-01-01'
projection_year_end = '2050-12-31'

### Step 1: Extract and Process Temperature Data ###
# Select data for the specified year
temperature_data = climate_ds.sel(time=slice(projection_year_start, projection_year_end))

# Check if temperature data was selected correctly
print(temperature_data)

# If the data is large, consider computing mean temperature
with ProgressBar():
    mean_temp = temperature_data["temperature"].mean(dim="time").compute()

# Create DataFrame for temperature data
lat, lon = np.meshgrid(mean_temp.lat.values, mean_temp.lon.values)
mean_temp_flat = mean_temp.values.ravel()

# Create a DataFrame for temperature data
temp_df = pd.DataFrame({
    "lat": lat.ravel(),
    "lon": lon.ravel(),
    "mean_temp": mean_temp_flat
})

# Create a GeoDataFrame for geospatial integration
temp_gdf = gpd.GeoDataFrame(
    temp_df,
    geometry=gpd.points_from_xy(temp_df.lon, temp_df.lat),
    crs="EPSG:4326"
)

### Step 2: Spatial Join with Power Infrastructure ###
# Spatial join to find which power plants fall within areas expected to exceed threshold
vulnerable_infrastructure = gpd.sjoin(power_gdf, temp_gdf[temp_gdf['mean_temp'] > temperature_threshold], predicate='within')


# Calculate risk score for visualization purposes
def calculate_risk(row):
    return (row['mean_temp'] - temperature_threshold) * 10

vulnerable_infrastructure['risk_score'] = vulnerable_infrastructure.apply(calculate_risk, axis=1)

### Step 3: Visualization ###
# Create a map with Folium
m = folium.Map(location=[power_gdf.geometry.y.mean(), power_gdf.geometry.x.mean()], zoom_start=5, tiles="cartodb positron")

# Add vulnerable infrastructure to map
for _, row in vulnerable_infrastructure.iterrows():
    folium.CircleMarker(
        location=(row.geometry.y, row.geometry.x),
        radius=5,
        color="red" if row['risk_score'] > 20 else "orange",
        fill=True,
        fill_opacity=0.7,
        popup=f"Risk Score: {row['risk_score']:.2f}, Temp: {row['mean_temp']:.2f} Â°C"
    ).add_to(m)

# Save the map
m.save("vulnerable_infrastructure_map.html")
print("Map saved as vulnerable_infrastructure_map.html")

### Step 4: Summary Analysis ###
# Summary of vulnerabilities
vulnerability_summary = vulnerable_infrastructure.groupby("type")["risk_score"].mean().reset_index()
print("Average Risk Score by Power Plant Type:")
print(vulnerability_summary)

# Display the map in the notebook (if running in Jupyter)
m
